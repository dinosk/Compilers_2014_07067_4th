//
// Generated by JTB 1.3.2 DIT@UoA patched
//

// O visitor xtizei ena HashMap me key ta onomata twn procedures kai values ton arithmo tou megalyterou TEMP pou xrisimopoieitai se aftes

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TempCounting implements GJVisitor<String,String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   HashMap<String, Integer> tempCount;
   int maxTemp;

   public TempCounting(HashMap<String, Integer> tempCount, String filename){
    this.tempCount = tempCount;
    this.maxTemp = 1;
   }

   public String visit(NodeList n, String argu) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this,argu);
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, String argu) {
      if ( n.present() ) {
         if (n.size() == 1)
            return n.elementAt(0).accept(this,argu);
         String _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, String argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public String visit(NodeSequence n, String argu) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this,argu);
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, String argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> n1="MAIN"
    * f1 -> n2=StmtList()
    * f2 -> n4="END"
    * f3 -> ( n6=Procedure() )*
    * f4 -> n8=<EOF>
    */
   public String visit(Goal n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> (  ( n3=Label() )? n4=Stmt() )*
    */
   public String visit(StmtList n, String argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> n0=Label()
    * f1 -> n2="["
    * f2 -> n3=IntegerLiteral()
    * f3 -> n5="]"
    * f4 -> n6=StmtExp()
    */
   public String visit(Procedure n, String argu) {
      String _ret=null;
      String name = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      tempCount.put(name, maxTemp);
      maxTemp = 1;
      return _ret;
   }

   /**
    * f0 -> ( n1=NoOpStmt() | n2=ErrorStmt() | n3=CJumpStmt() | n4=JumpStmt() | n5=HStoreStmt() | n6=HLoadStmt() | n7=MoveStmt() | n8=PrintStmt() )
    */
   public String visit(Stmt n, String argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> n1="NOOP"
    */
   public String visit(NoOpStmt n, String argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> n1="ERROR"
    */
   public String visit(ErrorStmt n, String argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> n1="CJUMP"
    * f1 -> n2=Exp()
    * f2 -> n3=Label()
    */
   public String visit(CJumpStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n1="JUMP"
    * f1 -> n2=Label()
    */
   public String visit(JumpStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n1="HSTORE"
    * f1 -> n2=Exp()
    * f2 -> n3=IntegerLiteral()
    * f3 -> n4=Exp()
    */
   public String visit(HStoreStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n1="HLOAD"
    * f1 -> n2=Temp()
    * f2 -> n3=Exp()
    * f3 -> n4=IntegerLiteral()
    */
   public String visit(HLoadStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n1="MOVE"
    * f1 -> n2=Temp()
    * f2 -> n3=Exp()
    */
   public String visit(MoveStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n1="PRINT"
    * f1 -> n2=Exp()
    */
   public String visit(PrintStmt n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( n1=StmtExp() | n2=Call() | n3=HAllocate() | n4=BinOp() | n5=Temp() | n6=IntegerLiteral() | n7=Label() )
    */
   public String visit(Exp n, String argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> n1="BEGIN"
    * f1 -> n2=StmtList()
    * f2 -> n4="RETURN"
    * f3 -> n5=Exp()
    * f4 -> n7="END"
    */
   public String visit(StmtExp n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n1="CALL"
    * f1 -> n2=Exp()
    * f2 -> n4="("
    * f3 -> ( n6=Exp() )*
    * f4 -> n8=")"
    */
   public String visit(Call n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n1="HALLOCATE"
    * f1 -> n2=Exp()
    */
   public String visit(HAllocate n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> n0=Operator()
    * f1 -> n1=Exp()
    * f2 -> n2=Exp()
    */
   public String visit(BinOp n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( n2="LT" | n4="PLUS" | n6="MINUS" | n8="TIMES" )
    */
   public String visit(Operator n, String argu) {
        n.f0.accept(this, argu);
        // System.out.println("Operator choice: "+n.f0.choice);
        return n.f0.accept(this, argu);

   }

   /**
    * f0 -> n1="TEMP"
    * f1 -> n2=IntegerLiteral()
    */
   public String visit(Temp n, String argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      int tempNo = Integer.parseInt(n.f1.accept(this, argu));
      if(tempNo > maxTemp){
        maxTemp = tempNo;
      }
      return _ret;
   }

   /**
    * f0 -> n1=<INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, String argu) {
      n.f0.accept(this, argu);
      return n.f0.toString();
   }

   /**
    * f0 -> n1=<IDENTIFIER>
    */
   public String visit(Label n, String argu) {
      n.f0.accept(this, argu);
      return n.f0.toString();
   }

}
